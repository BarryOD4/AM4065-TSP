@article{Dijkstra1959,
abstract = {We consider n points (nodes), some or all pairs of which are connected by a branch; the length of each branch is given. We restrict ourselves to the case where at least one path exists between any two nodes. We now consider two problems. Problem 1. Constrnct the tree of minimum total length between the n nodes. (A tree is a graph with one and only one path between every two nodes.) In the course of the construction that we present here, the branches are subdivided into three sets: I. the branches definitely assignec{\~{}} to the tree under construction (they will form a subtree) ; II. the branches from which the next branch to be added to set I, will be selected ; III. the remaining branches (rejected or not yet considered). The nodes are subdivided into two sets: A. the nodes connected by the branches of set I, B. the remaining nodes (one and only one branch of set II will lead to each of these nodes), We start the construction by choosing an arbitrary node as the only member of set A, and by placing all branches that end in this node in set II. To start with, set I is empty. From then onwards we perform the following two steps repeatedly. Step 1. The shortest branch of set II is removed from this set and added to set I. As a result one node is transferred from set B to set A. Step 2. Consider the branches leading from the node, that has just been transferred to set A, to the nodes that are still in set B. If the branch under consideration is longer than the corresponding branch in set II, it is rejected; it it is shorter, it reptaces the corresponding branch in set Ii, and the latter is rejected. We then return to step I and repeat the process until sets II and ]3 are empty. The branches in set I form the tree required. The solution given here is to be preferred to the solution given by J.B. KRUSKAL [1] and those given by H. LOBERMAN and A. WEINBERGER [2]. In their solutions all the-possibly 89-branches are first of all sorted according to length. Even if the length of the branches is a computable function of the node coordinates, their methods demand that data for all branches are stored simultaneously. Our method only requires the simultaneous storing of Numbs. Nath. Bd. 4. i9},
author = {Dijkstra, E. W.},
doi = {10.1007/BF01386390},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Dijkstra - 1959 - A note on two problems in connexion with graphs.pdf:pdf},
issn = {0945-3245},
journal = {Numerische Mathematik 1959 1:1},
keywords = {Mathematical Methods in Physics,Mathematical and Computational Engineering,Mathematical and Computational Physics,Mathematics,Numerical Analysis,Numerical and Computational Physics,Simulation,Theoretical,general},
month = {dec},
number = {1},
pages = {269--271},
publisher = {Springer},
title = {{A note on two problems in connexion with graphs}},
url = {https://link.springer.com/article/10.1007/BF01386390},
volume = {1},
year = {1959}
}
@article{Jones2014,
abstract = {The travelling salesman problem (TSP) is a well known and challenging combinatorial optimisation problem. Its computational intractability has attracted a number of heuristic approaches to generate satisfactory, if not optimal, candidate solutions. Some methods take their inspiration from natural systems, extracting the salient features of such systems for use in classical computer algorithms. In this paper we demonstrate a simple unconventional computation method to approximate the Euclidean TSP using a virtual material approach. The morphological adaptation behaviour of the material emerges from the low-level interactions of a population of particles moving within a diffusive lattice. A 'blob' of this material is placed over a set of data points projected into the lattice, representing TSP city locations, and the blob is reduced in size over time. As the blob shrinks it morphologically adapts to the configuration of the cities. The shrinkage process automatically stops when the blob no longer completely covers all cities. By manually tracing the perimeter of the blob a path between cities is elicited corresponding to a TSP tour. Over 10 runs on 20 randomly generated datasets consisting of 20 cities this simple and unguided method found tours with a mean average tour length of 6.41 {\%} longer than the minimum tours computed by a TSP solver (mean best performance was 4.27 {\%} longer and mean worst performance was 9.22 {\%} longer). We examine the insertion mechanism by which the blob constructs a tour, note some properties and limitations of its performance, and discuss the relationship between the blob TSP and proximity graphs which group points on the plane. The method is notable for its simplicity, novelty and the spatially represented mechanical mode of its operation. We discuss similarities between this method and previously suggested models of human performance on the TSP and suggest possibilities for further improvement. {\textcopyright} 2013 Springer Science+Business Media Dordrecht.},
archivePrefix = {arXiv},
arxivId = {1303.4969},
author = {Jones, Jeff and Adamatzky, Andrew},
eprint = {1303.4969},
journal = {Natural Computing},
keywords = {Material computation,Multi-agent,Travelling salesman problem,Unconventional computation,Virtual material},
month = {mar},
number = {1},
pages = {1--16},
title = {{Computation of the travelling salesman problem by a shrinking blob}},
volume = {13},
year = {2014}
}
@article{Ergezer2011,
abstract = {In this paper, we propose a framework for employing opposition-based learning to assist evolutionary algorithms in solving discrete and combinatorial optimization problems. To our knowledge, this is the first attempt to apply opposition to combinatorics. We introduce two different methods of opposition to solve two different type of combinatorial optimization problems. The first technique, open-path opposition, is suited for combinatorial problems where the final node in the graph does not have be connected to the first node, such as the graph-coloring problem. The latter technique, circular opposition, can be employed for problems where the endpoints of a graph are linked, such as the well-known traveling salesman problem (TSP). Both discrete opposition methods have been hybridized with biogeography-based optimization (BBO). Simulations on TSP benchmarks illustrate that incorporating opposition into BBO improves its performance. {\textcopyright} 2011 IEEE.},
author = {Ergezer, Mehmet and Simon, Dan},
doi = {10.1109/CEC.2011.5949792},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Ergezer, Simon - 2011 - Oppositional biogeography-based optimization for combinatorial problems.pdf:pdf},
journal = {2011 IEEE Congress of Evolutionary Computation, CEC 2011},
keywords = {Biogeography-based optimization,combinatorics,discrete optimization,evolutionary algorithms,graph-coloring problem,opposition,traveling salesman problem},
pages = {1496--1503},
title = {{Oppositional biogeography-based optimization for combinatorial problems}},
year = {2011}
}
@article{dantzig1948programming,
author = {Dantzig, George B},
journal = {Washington, DC},
title = {{Programming in a linear structure}},
url = {https://books.google.ie/books?id=ZpYca36h464C&sitesec=buy&source=gbs_vpt_read},
year = {1948}
}
@article{Sudhakar2011,
abstract = {This paper presents zero suffix method for solving the classical symmetric traveling salesman problem (TSP). It is conjectured that the chance of improving a good solution by moving a node to a position far away from its original one is small, it is possible to further improve a TSP tour that cannot be improved by other local search methods. To test the performance of the proposed method an example is solved. Thus this paper shows that algorithm proposed is efficient for solving the TSPs.},
author = {Sudhakar, V J and Kumar, V Navaneetha},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Sudhakar, Kumar - 2011 - A New Approach to Solve the Classical Symmetric Traveling Salesman Problem by Zero Suffix Method.pdf:pdf},
journal = {Int. J. Contemp. Math. Sciences},
keywords = {Local search,Symmetric traveling salesman problem,Zero suffix method},
number = {23},
pages = {1111--1120},
title = {{A New Approach to Solve the Classical Symmetric Traveling Salesman Problem by Zero Suffix Method}},
volume = {6},
year = {2011}
}
@article{Beardwood1959,
abstract = {We prove that the length of the shortest closed path through n points in a bounded plane region of area v is ‘almost always' asymptotically proportional to √(nv) for large n; and we extend this result to bounded Lebesgue sets in k–dimensional Euclidean space. The constants of proportionality depend only upon the dimensionality of the space, and are independent of the shape of the region. We give numerical bounds for these constants for various values of k; and we estimate the constant in the particular case k = 2. The results are relevant to the travelling-salesman problem, Steiner's street network problem, and the Loberman—Weinberger wiring problem. They have possible generalizations in the direction of Plateau's problem and Douglas' problem.},
author = {Beardwood, Jillian and Halton, J. H. and Hammersley, J. M.},
doi = {10.1017/S0305004100034095},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Beardwood, Halton, Hammersley - 1959 - The shortest path through many points.pdf:pdf},
issn = {1469-8064},
journal = {Mathematical Proceedings of the Cambridge Philosophical Society},
number = {4},
pages = {299--327},
publisher = {Cambridge University Press},
title = {{The shortest path through many points}},
url = {https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/shortest-path-through-many-points/F1C28B5730B94887F4659FCBF8A1F2BB},
volume = {55},
year = {1959}
}
@article{Dorigo1997,
abstract = {We describe an artificial ant colony capable of solving the travelling salesman problem (TSP). Ants of the artificial colony are able to generate successively shorter feasible tours by using information accumulated in the form of a pheromone trail deposited on the edges of the TSP graph. Computer simulations demonstrate that the artificial ant colony is capable of generating good solutions to both symmetric and asymmetric instances of the TSP. The method is an example, like simulated annealing, neural networks and evolutionary computation, of the successful use of a natural metaphor to design an optimization algorithm.},
author = {Dorigo, Marco and Gambardella, Luca Maria},
doi = {10.1016/S0303-2647(97)01708-5},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Dorigo, Gambardella - 1997 - Ant colonies for the travelling salesman problem.pdf:pdf},
issn = {0303-2647},
journal = {Biosystems},
keywords = {Adaptive behavior,Ant colony optimization,Artificial life,Combinatorial optimization,Computational intelligence,Reinforcement learning},
month = {jul},
number = {2},
pages = {73--81},
publisher = {Elsevier},
title = {{Ant colonies for the travelling salesman problem}},
volume = {43},
year = {1997}
}
@article{Junger1995,
abstract = {The traveling salesman problem, TSP for short, has model character in many branches of mathematics, computer science, and operations research. Heuristics, linear programming, and branch and bound, which are still the main components of today's most successful approaches to hard combinatorial optimization problems, were first formulated for the TSP and used to solve practical problem instances. When the theory of NP-completeness developed, the TSP was one of the first problems to be proven NP-hard by Karp in 1972. New algorithmic techniques have first been developed for or at least have been applied to the TSP to show their effectiveness. Examples are branch and bound, Lagrangean relaxation, Lin-Kernighan type methods, simulated annealing, and the field of polyhedral combinatorics for hard combinatorial optimization problems. The chapter presents a self-contained introduction into algorithmic and computational aspects of the traveling salesman problem along with their theoretical prerequisites as seen from the point of view of an operations researcher who wants to solve practical instances. The chapter provides guidelines to explain how to attack a TSP instance depending on its size, its structural properties (e.g., metric), the available computation time, and the desired quality of the solution. {\textcopyright} 1995, Elsevier Science B.V. All rights reserved.},
author = {J{\"{u}}nger, Michael and Reinelt, Gerhard and Rinaldi, Giovanni},
doi = {10.1016/S0927-0507(05)80121-5},
file = {:C$\backslash$:/Users/121108200/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/J{\"{u}}nger, Reinelt, Rinaldi - 1995 - Chapter 4 The traveling salesman problem.pdf:pdf},
issn = {0927-0507},
journal = {Handbooks in Operations Research and Management Science},
month = {jan},
number = {C},
pages = {225--330},
publisher = {Elsevier},
title = {{Chapter 4 The traveling salesman problem}},
volume = {7},
year = {1995}
}
@article{Dantzig1982,
abstract = {The author recalls the early days of linear programming, the contributions of von Neumann, Leontief, Koopmans and others. Linear Programming is viewed as a revolutionary development giving us the ability for the first time to state general objectives and to find, by means of the simplex method, optimal policy decisions for a broad class of practical decision problems of great complexity. {\textcopyright} 1982.},
author = {Dantzig, George B.},
doi = {10.1016/0167-6377(82)90043-8},
issn = {0167-6377},
journal = {Operations Research Letters},
keywords = {Linear programming,history,simplex method},
month = {apr},
number = {2},
pages = {43--48},
publisher = {North-Holland},
title = {{Reminiscences about the origins of linear programming}},
volume = {1},
year = {1982}
}
@incollection{SCHRIJVER20051,
title = {On the History of Combinatorial Optimization (Till 1960)},
editor = {K. Aardal and G.L. Nemhauser and R. Weismantel},
series = {Handbooks in Operations Research and Management Science},
publisher = {Elsevier},
volume = {12},
pages = {1-68},
year = {2005},
booktitle = {Discrete Optimization},
issn = {0927-0507},
doi = {https://doi.org/10.1016/S0927-0507(05)12001-5},
url = {https://www.sciencedirect.com/science/article/pii/S0927050705120015},
author = {Alexander Schrijver},
abstract = {Publisher Summary
This chapter traces the history of combinatorial optimization. As a coherent mathematical discipline, combinatorial optimization is relatively young. Linear programming forms the hinge in the history of combinatorial optimization. Its initial conception by Kantorovich and Koopmans was motivated by combinatorial applications—in particular, in transportation and transshipment. The assignment problem is one of the first investigated combinatorial optimization problems. A breakthrough in solving the assignment problem came when Dantzig showed that the assignment problem can be formulated as a linear programming problem that automatically has an integer optimum solution. The reason is a theorem of Birkhoff [1946] stating that the convex hull of the permutation matrices is equal to the set of doubly stochastic matrices—nonnegative matrices in which each row and column sum is equal to 1. Therefore, minimizing a linear functional over the set of doubly stochastic matrices (which is a linear programming problem) gives a permutation matrix, being the optimum assignment.}
}

@misc{Dalgety,
author = {Dalgety, James},
title = {{Sir William Hamilton's Icosian Game and Traveller's Dodecahedron Puzzle.}},
url = {https://www.puzzlemuseum.com/month/picm02/200207icosian.htm},
urldate = {2021-10-18}
}

@book{dantzig2006linear,
  title={Linear programming 1: introduction},
  author={Dantzig, George B and Thapa, Mukund N},
  year={2006},
  publisher={Springer Science \& Business Media}
}

@article{10.1145/28869.28874,
author = {Fredman, Michael L. and Tarjan, Robert Endre},
title = {Fibonacci Heaps and Their Uses in Improved Network Optimization Algorithms},
year = {1987},
issue_date = {July 1987},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {3},
issn = {0004-5411},
url = {https://doi.org/10.1145/28869.28874},
doi = {10.1145/28869.28874},
abstract = {In this paper we develop a new data structure for implementing heaps (priority queues). Our structure, Fibonacci heaps (abbreviated F-heaps), extends the binomial queues proposed by Vuillemin and studied further by Brown. F-heaps support arbitrary deletion from an n-item heap in O(log n) amortized time and all other standard heap operations in O(1) amortized time. Using F-heaps we are able to obtain improved running times for several network optimization algorithms. In particular, we obtain the following worst-case bounds, where n is the number of vertices and m the number of edges in the problem graph: O(n log n + m) for the single-source shortest path problem with nonnegative edge lengths, improved from O(mlog(m/n+2)n);  O(n2log n + nm) for the all-pairs shortest path problem, improved from O(nm log(m/n+2)n);  O(n2log n + nm) for the assignment problem (weighted bipartite matching), improved from O(nmlog(m/n+2)n);  O(mβ(m, n)) for the minimum spanning tree problem, improved from O(mlog log(m/n+2)n); where β(m, n) = min {i | log(i)n ≤ m/n}. Note that β(m, n) ≤ log*n if m ≥ n.  Of these results, the improved bound for minimum spanning trees is the most striking, although all the results give asymptotic improvements for graphs of appropriate densities.},
journal = {J. ACM},
month = {jul},
pages = {596–615},
numpages = {20}
}

@Article{         harris2020array,
 title         = {Array programming with {NumPy}},
 author        = {Charles R. Harris and K. Jarrod Millman and St{\'{e}}fan J.
                 van der Walt and Ralf Gommers and Pauli Virtanen and David
                 Cournapeau and Eric Wieser and Julian Taylor and Sebastian
                 Berg and Nathaniel J. Smith and Robert Kern and Matti Picus
                 and Stephan Hoyer and Marten H. van Kerkwijk and Matthew
                 Brett and Allan Haldane and Jaime Fern{\'{a}}ndez del
                 R{\'{i}}o and Mark Wiebe and Pearu Peterson and Pierre
                 G{\'{e}}rard-Marchant and Kevin Sheppard and Tyler Reddy and
                 Warren Weckesser and Hameer Abbasi and Christoph Gohlke and
                 Travis E. Oliphant},
 year          = {2020},
 month         = sep,
 journal       = {Nature},
 volume        = {585},
 number        = {7825},
 pages         = {357--362},
 doi           = {10.1038/s41586-020-2649-2},
 publisher     = {Springer Science and Business Media {LLC}},
 url           = {https://doi.org/10.1038/s41586-020-2649-2}
}

@book{van1995python, 
  title={The Python Library Reference, release 3.8.2},
  author={Van Rossum, Guido}, 
  year={2020}, 
  publisher={Python Software Foundation} 
} 

@Article{Hunter:2007,
  Author    = {Hunter, J. D.},
  Title     = {Matplotlib: A 2D graphics environment},
  Journal   = {Computing in Science \& Engineering},
  Volume    = {9},
  Number    = {3},
  Pages     = {90--95},
  abstract  = {Matplotlib is a 2D graphics package used for Python for
  application development, interactive scripting, and publication-quality
  image generation across user interfaces and operating systems.},
  publisher = {IEEE COMPUTER SOC},
  doi       = {10.1109/MCSE.2007.55},
  year      = 2007
}

@article{osti_960616,
title = {Exploring network structure, dynamics, and function using networkx},
author = {Hagberg, Aric and Swart, Pieter and S Chult, Daniel},
abstractNote = {NetworkX is a Python language package for exploration and analysis of networks and network algorithms. The core package provides data structures for representing many types of networks, or graphs, including simple graphs, directed graphs, and graphs with parallel edges and self loops. The nodes in NetworkX graphs can be any (hashable) Python object and edges can contain arbitrary data; this flexibility mades NetworkX ideal for representing networks found in many different scientific fields. In addition to the basic data structures many graph algorithms are implemented for calculating network properties and structure measures: shortest paths, betweenness centrality, clustering, and degree distribution and many more. NetworkX can read and write various graph formats for eash exchange with existing data, and provides generators for many classic graphs and popular graph models, such as the Erdoes-Renyi, Small World, and Barabasi-Albert models, are included. The ease-of-use and flexibility of the Python programming language together with connection to the SciPy tools make NetworkX a powerful tool for scientific computations. We discuss some of our recent work studying synchronization of coupled oscillators to demonstrate how NetworkX enables research in the field of computational networks.},
doi = {},
url = {https://www.osti.gov/biblio/960616}, journal = {},
place = {United States},
year = {2008},
month = {1}
} 

@article{article,
author = {Dorigo, Marco and Maniezzo, Vittorio and Colorni, Alberto},
year = {1996},
month = {02},
pages = {29-41},
title = {Ant System: Optimization by a colony of cooperating agents. IEEE Trans Syst Man Cybernetics - Part B},
volume = {26},
journal = {IEEE transactions on systems, man, and cybernetics. Part B, Cybernetics : a publication of the IEEE Systems, Man, and Cybernetics Society},
doi = {10.1109/3477.484436}
}

@misc{Lague.2021,
 author = {Lague, Sebastian Lague},
 year = {2021},
 month = {03},
 title = {Coding Adventure: Ant and Slime Simulations},
 url = {https://www.youtube.com/watch?v=X-iSQQgOd1A},
 urldate = {2021-12-06} %date of last access
}